// Prisma schema for HRC Kitchen

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  STAFF
  KITCHEN
  ADMIN
}

enum OrderStatus {
  PLACED
  PARTIALLY_FULFILLED
  FULFILLED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum MenuCategory {
  MAIN
  SIDE
  DRINK
  DESSERT
  OTHER
}

enum Weekday {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
}

enum VariationGroupType {
  SINGLE_SELECT
  MULTI_SELECT
}

model User {
  id            String    @id @default(uuid())
  email         String    @unique
  passwordHash  String    @map("password_hash")
  fullName      String    @map("full_name")
  department    String?
  location      String?
  phone         String?
  role          UserRole  @default(STAFF)
  emailVerified Boolean   @default(false) @map("email_verified")
  isActive      Boolean   @default(true) @map("is_active")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  // Relations
  orders        Order[]
  configUpdates SystemConfig[] @relation("ConfigUpdatedBy")

  @@map("users")
}

model MenuItem {
  id              String        @id @default(uuid())
  name            String
  description     String?
  price           Decimal       @db.Decimal(10, 2)
  category        MenuCategory
  imageUrl        String?       @map("image_url")
  weekdays        Weekday[]     @default([])
  dietaryTags     String[]      @default([]) @map("dietary_tags")
  isActive        Boolean       @default(true) @map("is_active")
  createdAt       DateTime      @default(now()) @map("created_at")
  updatedAt       DateTime      @updatedAt @map("updated_at")

  // Relations
  customizations  MenuItemCustomization[]
  variationGroups VariationGroup[]
  orderItems      OrderItem[]

  @@index([isActive])
  @@map("menu_items")
}

model MenuItemCustomization {
  id                String    @id @default(uuid())
  menuItemId        String    @map("menu_item_id")
  customizationName String    @map("customization_name")
  createdAt         DateTime  @default(now()) @map("created_at")

  // Relations
  menuItem          MenuItem  @relation(fields: [menuItemId], references: [id], onDelete: Cascade)

  @@index([menuItemId])
  @@map("menu_item_customizations")
}

model VariationGroup {
  id           String              @id @default(uuid())
  menuItemId   String              @map("menu_item_id")
  name         String              // "Protein Choice", "Spice Level", "Size", etc.
  type         VariationGroupType  @default(SINGLE_SELECT)
  required     Boolean             @default(false)
  displayOrder Int                 @default(0) @map("display_order")
  createdAt    DateTime            @default(now()) @map("created_at")
  updatedAt    DateTime            @updatedAt @map("updated_at")

  // Relations
  menuItem     MenuItem            @relation(fields: [menuItemId], references: [id], onDelete: Cascade)
  options      VariationOption[]

  @@index([menuItemId])
  @@map("variation_groups")
}

model VariationOption {
  id               String         @id @default(uuid())
  variationGroupId String         @map("variation_group_id")
  name             String         // "Grilled Chicken", "Mild", "Large", etc.
  priceModifier    Decimal        @default(0) @db.Decimal(10, 2) @map("price_modifier")
  isDefault        Boolean        @default(false) @map("is_default")
  displayOrder     Int            @default(0) @map("display_order")
  createdAt        DateTime       @default(now()) @map("created_at")
  updatedAt        DateTime       @updatedAt @map("updated_at")

  // Relations
  variationGroup   VariationGroup @relation(fields: [variationGroupId], references: [id], onDelete: Cascade)

  @@index([variationGroupId])
  @@map("variation_options")
}

model Order {
  id                String        @id @default(uuid())
  userId            String?       @map("user_id")
  guestEmail        String?       @map("guest_email")
  guestFirstName    String?       @map("guest_first_name")
  guestLastName     String?       @map("guest_last_name")
  orderNumber       String        @unique @map("order_number")
  totalAmount       Decimal       @db.Decimal(10, 2) @map("total_amount")
  paymentStatus     PaymentStatus @default(PENDING) @map("payment_status")
  paymentId         String?       @map("payment_id")
  fulfillmentStatus OrderStatus   @default(PLACED) @map("fulfillment_status")
  specialRequests   String?       @map("special_requests")
  orderDate         DateTime      @map("order_date") @db.Date
  createdAt         DateTime      @default(now()) @map("created_at")
  updatedAt         DateTime      @updatedAt @map("updated_at")

  // Relations
  user              User?         @relation(fields: [userId], references: [id])
  orderItems        OrderItem[]

  @@index([userId])
  @@index([guestEmail])
  @@index([orderDate])
  @@index([fulfillmentStatus])
  @@map("orders")
}

model OrderItem {
  id                 String      @id @default(uuid())
  orderId            String      @map("order_id")
  menuItemId         String      @map("menu_item_id")
  quantity           Int         @default(1)
  customizations     Json?       @db.JsonB  // Legacy: old free-text customizations
  selectedVariations Json?       @map("selected_variations") @db.JsonB  // New: structured variations with pricing
  priceAtPurchase    Decimal     @db.Decimal(10, 2) @map("price_at_purchase")
  fulfillmentStatus  OrderStatus @default(PLACED) @map("fulfillment_status")
  createdAt          DateTime    @default(now()) @map("created_at")

  // Relations
  order             Order       @relation(fields: [orderId], references: [id], onDelete: Cascade)
  menuItem          MenuItem    @relation(fields: [menuItemId], references: [id])

  @@index([orderId])
  @@index([menuItemId])
  @@index([fulfillmentStatus])
  @@map("order_items")
}

model SystemConfig {
  id          String   @id @default(uuid())
  configKey   String   @unique @map("config_key")
  configValue String   @map("config_value")
  updatedAt   DateTime @updatedAt @map("updated_at")
  updatedBy   String?  @map("updated_by")

  // Relations
  updater     User?    @relation("ConfigUpdatedBy", fields: [updatedBy], references: [id])

  @@map("system_config")
}
